PROGRAM GUATSAP;
{CUALQUIER PARECIDO A OTROS PROGRAMAS DE MENSAJERIA ES PURA COINCIDENCIA}
USES
	CRT,DOS;
CONST
	ULTIMOSDIEZ = 10;
	ULTIMOSCINCO = 5;
	TODOSMSN = -2;
TYPE
	PUNTARUS = ^TUSUARIO;
	TUSUARIO = RECORD
		USUARIO,PASSWORD: STRING[8];
		MENOR,MAYOR : PUNTARUS; 
	END;
	
	REGFECHAHORA = RECORD
		RDIA,RMES,RANIO,RHORA,RMIN,RSEG : WORD;
	END;
	
	PUNTMENSAJE = ^TMENSAJE;
	TMENSAJE = RECORD
		FECHAHORA : REGFECHAHORA;
		TEXTO : STRING[256];
		ESCRITOR : PUNTARUS;
		LEIDO : BOOLEAN;
		SIG : PUNTMENSAJE;
	END;
	
	PUNTCONVERS = ^TCONVERS;
	TCONVERS = RECORD
		CODIGO : INTEGER;
		USUARIO1,USUARIO2 : PUNTARUS;
		MENSAJE : PUNTMENSAJE;
		SIG : PUNTCONVERS;
	END;
	
	REGUSUARIO = RECORD
		RUSUARIO,RPASSWORD : STRING[8];	
	END;
	
	REGCONVERS = RECORD
		RCODIGO : INTEGER;
		RUSUARIO1,RUSUARIO2 : STRING[8];
	END;
	
	REGMENSAJE = RECORD
		RFECHAHORA : REGFECHAHORA;
		RCODIGO : INTEGER;
		RUSUARIO : STRING[8];
		RTEXTO : STRING[255];
		RLEIDO : BOOLEAN;
	END;
	
	TARCHUSUARIOS = FILE OF REGUSUARIO;
	TARCHCONVERS = FILE OF REGCONVERS;
	TARCHMENSAJES = FILE OF REGMENSAJE;

PROCEDURE ERRORAPERTURAARCHIVOS(ARCHUS:TARCHUSUARIO; ARCHMSN:TARCHMENSAJES; ARCHCONVERS:TARCHCONVERS; VAR ERRORARCHUS:BOOBLEAN; VAR ERRORMSN:BOOLEAN; VAR ERRORCONVERS:BOOLEAN);
{DADOS LOS ARCHIVOS VERIFICA SI EXISTEN COMPROBANDO SI SE PUEDEN ABRIR} {1}
BEGIN
	ERRORARCHUS := FALSE;
	ERRORMSN := FALSE;
	ERRORCONVERS := FALSE;
	ASSIGN(ARCHUS,'ARCHIVOUSUARIOS.DAT');
	ASSIGN(ARCHMSN,'ARCHIVOMENSAJES.DAT');
	ASSIGN(ARCHCONVERS,'ARCHIVOCONVERSACIONES.DAT');
	{$I-}
		RESET(ARCHUS);
	{$I+}
	IF IORESULT <> 0 THEN
		ERRORARCHUS := TRUE;
	{$I-}
		RESET(ARCHMSN);
	{$I+}
	IF IORESULT <> 0 THEN
		ERRORMSN := TRUE;
	{$I-}
		RESET(ARCHCONVERS);
	{$I+}
	IF IORESULT <> 0 THEN
		ERRORCONVERS := TRUE;
END;

PROCEDURE GENERARUSUARIO(VAR NODO:PUNTARUS; USER:STRING; PAZ:STRING);
{CON LOS DATOS NECESARIOS GENER UN NODO NUEVO DE USUARIO}{2}
BEGIN
	NEW(NODO);
	NODO^Â·USUARIO := USER;
	NODO^.PASSWORD := PAZ;
	NODO^.MENOR := NIL;
	NODO^.MAYOR := NIL;
END;

PROCEDURE INSERTARUSUARIO(VAR ARBOL:PUNTARUS; NODO:PUNTARUS);
{DADO EL NODO LO INSERTA ORDENADO EN EL ARBOL}{3}
BEGIN
	IF ARBOL = NIL THEN
		ARBOL := NODO
	ELSE
		IF NODO^.USUARIO < ARBOL^.USUARIO THEN
			INSERTARUSUARIO(ARBOL^.MENOR)
		ELSE
			INSERTARUSUARIO(ARBOL^.MAYOR);
END;

PROCEDURE NUEVOUSUARIO(VAR ARBOL:PUNTARUS; USER:STRING; PAZ:STRING; VAR NODO:PUNTARUS);
{DISTRUBUYE LAS TAREAS DE CRER UN NODO Y AGREGARLO AL ARBOL}{4}
BEGIN
	GENERARUSUARIO(NODO,USER,PAZ);
	INSERTARUSUARIOENELARBOL(ARBOL,NODO);
END;

PROCEDURE GENERARARBOL(ARCHUS:TARCHUS; VAR ARBOL:PUNTARUS);
{CON EL ARCHIVO LEE LOS REGISTROS Y VA GENERANDO EL ARBOL}{5}
VAR
	REG: TARCHUSUARIO;
	NOD: PUNTARUS;
BEGIN
	WHILE (NOT EOF(ARCHUS)) DO BEGIN
		READ(ARCHUS,REG);
		NUEVOUSUARIO(ARBOL,REG.RUSUARIO,REG.RPASSWORD,NOD);
	END;
END;	

PROCEDURE GENERARNODOCONVERSACION(COD:INTEGER; USUARIO1:PUNTARUS; USUARIO2:PUNTARUS; VAR NODO:PUNTCONVERS);
{GENERA UN NODO CONVERSACION CON LOS DATOS PROVISTOS POR EL ARCHIVO}{6}
BEGIN
	NEW(NODO);
	NODO^.CODIGO := COD;
	NODO^.USUARIO1 := USUARIO1;
	NODO^.USUARIO2 := USUARIO2;
	NODO^.MENSAJE := NIL;
	NODO^.SIG := NIL;
END;

FUNCTION POSICIONUSUARIO(USER:STRING; ARBOL:PUNTARUS): PUNTARUS;
{SI EL USUARIO EXISTE RETORNA SU POSICION DE LO CONTRAIO RETORNA NIL}{7}
BEGIN
	IF ARBOL = NIL THEN
		POSICIONUSUARIO := NIL
	ELSE
		IF ARBOL^.USUARIO = USER THEN
			POSICIONUSUARIO := ARBOL
		ELSE
			IF ARBOL^.USUARIO < USER THEN
				POSICIONUSUARIO := POSICIONUSUARIO(USER,ARBOL^.MAYOR)
			ELSE
				POSICIONUSUARIO := POSICIONUSUARIO(USER,ARBOL^.MENOR);
END;

PROCEDURE INSERTARCONVERSACION(VAR LISTACONVERS:PUNTCONVER; RBOL:PUNTARUS; REG:REGCONVERS);
{INSERTA UNA CONVERSACION EN BASE AL CODIGO}{8}
VAR
	US1,US2: PUNTARUS;
	NODO: PUNTCONVERS;
BEGIN
	IF (LISTACONVERS = NIL) OR (LISTACONVERS^.CODIGO > REG.RCODIGO) THEN BEGIN
		US1 := POSICIONUSUARIO(ARBOL^.REG.RUSUARIO1);
		US2 := POSICIONUSUARIO(ARBOL^.REG.RUSUARIO2);
		GENERARNODOCONVERSACION(REG.RCODIGO,US1,US2,NODO);
		NODO^.SIG := LISTA;
		LISTA := NODO;
	END
	ELSE
		INSERTARCONVERSACION(LISTACONVERS^.SIG,ARBOL,REG);
END;

PROCEDURE GENERARCONVERSACIONES(ARBOL:PUNTARUS; ARCHCONVERS:TARCHCONVERS; VAR LISTACONVERS:PUNTCONVERS);
{LEE EL ARCHIVO DE CONVERSACIONES, LO VUELCA A UN REGISTRO}{9}
VAR
	REG: REGCONVERS;
BEGIN
	WHILE (NOT EOF(ARCHCONVERS)) DO BEGIN
		READ(REG, ARCHCONVERS);
		INSERTARCONVERSACION(LISTACONVERS,ARBOL,REG);
	END;
END;

FUNCTION POSICIONCONVERSACION(LISTACONVERS:PUNTCONVERS; COD:INTEGER):PUNTCONVERS;
{DEVUELVE LA CONVERSACION BUSCADA}{10}
BEGIN
	IF (LISTACONVERS = NIL) OR (LISTACONVERS^.CODIGO > COD) THEN
		POSICIONCONVERSACION := NIL
	ELSE
		IF LISTACONVERS <> NIL THEN
			IF LISTACONVER^.CODIGO = COD THEN
				POSICIONCONVERSACION := LISTACONVERS
			ELSE
				POSICIONCONVERSACION := POSICIONCONVERSACION(LISTACONVER^.SIG,COD);
END;

FUNCTION POSICIONMENSAJE(LISTAMSN:PUNTMENSAJE; REGFECHA:REGFECHAHORA):PUNTMENSAJE;
{RETORNA LA UBICACION DONDE DEBE SER INSERTADO EL MENSAJE EN ORDEN CRONOLOGICO INVERSO}{11}
BEGIN
	IF LISTAMSN = NIL THEN
		POSICIONMENSAJE := LISTAMSN
	ELSE
		IF REGFECHA.RANIO > LISTAMSN^.RFECHAHORA.RANIO THEN
			POSICIONMENSAJE := LISTAMSN
		ELSE
			IF REGFECHA.RANIO < LISTAMSN^.RFECHAHORA.RANIO THEN
				POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA)
			ELSE
				IF REGFECHA.RMES > LISTAMSN^.REGFECHAHORA.RMES THEN
					POSICIONMENSAJE := LISTAMSN
				ELSE
					IF REGFECHA.RMES < LISTAMSN^.REGFECHAHORA.RMES THEN
						POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA)
					ELSE
						IF REGFECHA.RDIA > LISTAMSN^.RFECHAHORA.RDIA THEN
							POSICIONMENSAJE := LISTAMSN
						ELSE
							IF REGFECHA.RDIA < LISTAMSN^.RFECHAHORA.RDIA THEN
								POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA)
							ELSE
								IF REGFECHA.RHORA > LISTAMSN^.REGFECHAHORA.RHORA THEN
									POSICIONMENSAJE := LISTAMSN
								ELSE
									IF REGFECHA.RHORA < LISTAMSN^.REGFECHAHORA.RHORA THEN
										POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA)
									ELSE
										IF REGFECHA.RMIN > LISTAMSN^.RFECHAHORA.RMIN THEN
											POSICIONMENSAJE := LISTAMSN
										ELSE
											IF REGFECHA.RMIN < LISTAMSN^.RFECHAHORA.RMIN THEN
												POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA)
											ELSE
												IF REGFECHA.RSEG > LISTAMSN^.REGFECHAHORA.RSEG THEN
													POSICIONMENSAJE := LISTAMSN
												ELSE
													POSICIONMENSAJE := POSICIONMENSAJE(LISTAMSN^.SIG,REGFECHA);
END;

PROCEDURE GENERARNODOMENSAJE(VAR NODO:PUNTMENSAJE; REG:REGMENSAJE, ARBOL:PUNTARUS);
{DA A LUZ UN NODO DE MENSAJE}{12}
BEGIN
	NEW(NODO);
	NODO^.FECHAHORA.RDIA := REG.RFECHAHORA.RDIA;
	NODO^.FECHAHORA.RMES := REG.RFECHAHORA.RMES;
	NODO^.FECHAHORA.RANIO := REG.RFECHAHORA.RANIO;
	NODO^.FECHAHORA.RHORA := REG.RFECHAHORA.RHORA;
	NODO^.FECHAHORA.RMIN := REG.RFECHAHORA.RMIN;
	NODO^.FECHAHORA.RSEG := REG.RFECHAHORA.RSEG;
	NODO^.ESCRITOR := POSICIONUSUARIO(REG.RUSUARIO,ARBOL);
	NODO^.TEXTO := REG.RTEXTO;
	NODO^.LEIDO := REG.RLEIDO;
	NODO^.SIG := NIL;
END;

PROCEDURE AGREGARMENSAJE(REG:REGMENSAJE; LISTACONVERS:PUNTCONVERS; ARBOL:PUNARUS);
{CON EL REGISTRO GENERA Y UBICA NODOS PARA COMPLETAR LOS MENSAJES}{13}
VAR
	NODO,POSMSN: PUNTMENSAJE;
	POSCONVERS: PUNTCONVERS;	
BEGIN
	POSCONVERS := POSICIONCONVERSACION(LISTACONVERS,REG.RCODIGO);
	POSMSN := POSICIONMENSAJE(POSCONVERS^.MENSAJE,REG.RFECHAHORA);
	GENERARNODOMENSAJE(NODO,REG,ARBOL);
	NODO^.SIG := POSMSN;
	POSMSN := NODO;
END;

PROCEDURE GENERARMENSAJES(ARCHMSN:TARCHMENSAJES; LISTACONVERS:PUNTCONVERS; ARBOL:PUNTARUS);
{VUELCA LOS REGISTROS A UNA VARIABLE Y AGREGA MENSAJES}{14}
VAR
	REG: REGMENSAJE;
BEGIN
	WHILE NOT EOF(ARCHMSN) DO BEGIN
		READ(ARCHMSN,REG);
		AGREGARMENSAJE(REG,LISTACONVERS,ARBOL);
	END;
END;

PROCEDURE CARGARESTRUCTURAS(VAR ARBOL:PUNTARUS; VAR LISTACONVERS:PUNTCONVERS; ARCHMSN:TARCHMENSAJES; ARCHUS:TARCHUSUARIOS; ARCHCONVERS:TARCHCONVERS; ERRORMSN:BOOLEAN; ERRORCONVERS:BOOLEAN; ERRORARCHUS:BOOLEAN);
{EN BASE A LOS ERROR QUE INDICAN SI LOS ARCHIVOS EXISTEN O NO VA GENERANDO LAS ESTRUCTURAS NECESARIAS}{15}
BEGIN
	IF ERRORARCHU THEN
		WRITELN('Archivo de usuarios vacio, sin usuarios no esposible generar ni conversacion ni mensajes')
	ELSE BEGIN
		RESET(ARCHUS);
		GENERARARBOL(ARCHUS,ARBOL);
		CLOSE(ARCHUS);
		IF ERRORCONVER THEN
			WRITELN('Achivo de conversaciones vacio, sin conversaciones no es posible generar mensajes')
		ELSE BEGIN
			RESET(ARCHCONVERS);
			GENERARCONVERSACIONES(ARBOL,ARCHCONVERS,LISTACONVERS);
			CLOSE(ARCHCONVERS);
			IF ERRORMSN THEN
				WRITELN('Archivo de mensajes vacio, no existiran mensajes')
			ELSE BEGIN
				RESET(ARCHMSN);
				GENERARMENSAJES(ARCHMSN,LISTACONVERS,ARBOL);
				CLOSE(ARCHMSN);
			END;
		END;
	END;
END;

FUNCTION MENSAJESNOLEIDOS(LISTAMSN:PUNTMENSAJE; USER:STRING): BOOLEAN;
{DADA UNA LISTA DE MENSAJES INFORMA SI AL MENOS UN MENSAJES ESTA SIN LEER}{16}
VAR
	MSNNOLEER: BOOLEAN;
BEGIN
	MSNNOLEER := FALSE;
	WHILE (LISTAMSN <> NIL) AND (NOT MSNNOLEER) THEN BEGIN
		IF (NOT LISTAMSN^.LEIDO) AND (LISTAMSN^.ESCRITOR^.USUARIO <> USER) THEN
			MSNNOLEER := TRUE;
		LISTA := LISTA^.SIG;
	END;
	MENSAJESNOLEIDOS := MSNNOLEER;
END;

FUNCTION CANTIDADNOLEIDOS(LISTAMSN:PUNTMENSAJE; USER:STRING): INTEGER;
{CON LA LISTA DE MENSAJES RETORNA LA CANTIDAD DE MENSAJES NO LEIDOS}{17}
BEGIN
	IF LISTAMSN = NIL THEN
		CANTIDADNOLEIDOS := 0
	ELSE
		IF (LISTA^.ESCRITOR^.USUARIO <> USER) AND (NOT LISTAMSN^.LEIDO) THEN
			CANTIDADNOLEIDOS := CANTIDADNOLEIDOS(LISTAMSN^.SIG,USER) + 1;
END;

PROCEDURE LISTARCONVERSACIONESACTIVAS(LISTACONVERS:PUNTCONVERS; USER:STRING);
{MUESTRAS LAS CONVESACIONES ACTIVAS, MENSAJES SIN LEER E INTERLOCUTOR CORESPONDIENTE}{18}
VAR
	MSNNOLEIDOS: BOOLEAN;
	CANTIDAD : INTEGER;
BEGIN
	IF LISTACONVERS = NIL THEN
		WRITE('No hay mas conversaciones activas')
	ELSE
		IF (LISTACONVERS^.USUARIO1^.USUARIO = USER) OR (LISTACONVERS^.USUARIO2^.USUARIO = USER) THEN BEGIN
			MSNNOLEIDOS := MENSAJESNOLEIDOS(LISTACONVERS^.MENSAJE,USER);
			IF MSNNOLEIDOS THEN BEGIN
				CANTIDAD := CANTIDADNOLEIDOS(LISTACONVERS^.MENSAJE,USER);
				IF LISTACONVERS^.USUARIO1^.USUARIO = USER THEN
					WRITELN('Conversacion activa con ',LISTACONVERS^.USUARIO2^.USUARIO,', Codigo ',LISTACONVERS^.CODIGO,' ,con ',CANTIDAD,' mensajes sin leer');
				ELSE
					WRITELN('Conversacion activa con ',LISTACONVERS^.USUARIO1^.USUARIO,', Codigo ',LISTACONVERS^.CODIGO,' ,con ',CANTIDAD,' mensajes sin leer');
			END;
			LISTARCONVERSACIONESACTIVAS(LISTACONVERS^.SIG,USER);
		END;
END;
	
PROCEDURE LISTARTODASLASCONVERSACIONES(LISTCONVERS:PUNTCONVERS; USER:STRING);
{MUESTRA TODAS LAS CONVERSACIONES EN LAS CUALES EL USER PARTICIPA O PARTICIPO}{19}
BEGIN
	IF LISTCONVERS = NIL THEN
		WRITELN('No hay mas conversaciones para mostrar')
	ELSE BEGIN
		IF (LISTACONVERS^.USUARIO1^.USUARIO = USER) OR (LISTACONVERS^.USUARIO2^.USUARIO = USER) THEN
			IF LISTACONVERS^.USUARIO1^.USUARIO = USER THEN
				WRITELN('Coversacion Codigo: ',LISTACONVERS^.CODIGO,', entablada con ',LISTACONVERS^.USUARIO2^.USUARIO)
			ELSE
				WRITELN('Coversacion Codigo: ',LISTACONVERS^.CODIGO,', entablada con ',LISTACONVERS^.USUARIO1^.USUARIO);
		LISTARTODASLASCONVERSACIONES(LISTACONVERS^.SIG,USER);		
	END;
END;

FUNCTION PERTENECEALACONVERSACION(POS:PUNTCOVERS; USER:STRING): BOOLEAN;
{INFORMA SI EL USER PERTENES A ESA CONVERSACION}{20}
BEGIN
	IF (POS^.USUARIO1^.USUARIO = USER) OR (POS^.USUARIO2^.USUARIO = USER) THEN
		PERTENECEALACONVERSACION := TRUE
	ELSE
		PERTENECEALACONVERSACION := FALSE;
END;

PROCEDURE SETEODETEXTO(LISTAMSN:PUNTMENSAJE; USER:STRING);
{FORMATEA LA SALIDA DE TEXTO}{21}
BEGIN
	IF LISTAMSN^.ESCRITOR <> USER THEN
		LISTAMSN^.LEIDO := TRUE
	WRITELN('<',LISTAMSN^.FECHAHORA.RDIA,'/',LISTAMSN^.FECHAHORA.RMES,'/',LISTAMSN^.FECHAHORA.RANIO,' - ',LISTAMSN^.FECHAHORA.RHORA,':',LISTAMSN^.FECHAHORA.RMIN,':',LISTAMSN^.FECHAHORA.RSEG,'><',LISTAMSN^.ESCRITOR^.USUARIO,'> ',LISTAMSN^.TEXTO);
END;

PROCEDURE MOSTRARMENSAJES(CANTIDAD:INTEGER; LISTAMSN:PUNTMENSAJE; USER:STRING);
{MUESTRA LOS MENSAJES EN BASE A LA CANTIDAD QUE SE QUIERE MOSTRAR}{22}
BEGIN
	IF (LISTAMSN <> NIL) AND (CANTIDAD = TODOSMSN) THEN BEGIN
		MOSTRARMENSAJES(CANTIDAD,LISTAMSN^.SIG,USER);
		SETEODETEXTO(LISTAMSN,USER);
	END
	ELSE
		IF (LISTAMSN <> NIL) AND (CANTIDAD > 0) THEN BEGIN
			MOSTRARMENSAJES(CANTIDAD-1,LISTAMSN^.SIG,USER);
			SETEODETEXTO(LISTAMSN,USER);
		END;
		ELSE
			IF LISTAMSN = NIL THEN
				WRITE('La lista de mensajes esta vacia o ya se mostro completmente');
END;

PROCEDURE GENERARNODOMSNNUEVO(VAR NODO:PUNTMENSAJE; USER:STRING, ARBOL:PUNTARUS);
{GENERA UN NUEVO MENSAJE CON TODOS LOS DATOS NECESARIOS}{23}
VAR
	HORA,MIN,SEG,CENT,ANIO,MES,DIA,DIASEM: WORD;
	MSN: STRING[255];
BEGIN
	NEW(NODO);
	WRITE('ingrese respuesta(256 caracteres): ');
	READLN(MSN);
	NODO^.TEXTO := MSN;
	GETTIME(HORA,MIN,SEG,CENT);
	GETDATE(ANIO,MES,DIA,DIASEM);
	NODO^.FECHAHORA.RDIA := DIA;
	NODO^.FECHAHORA.RMES := MES;
	NODO^.FECHAHORA.RANIO := ANIO;
	NODO^.FECHAHORA.RHORA := HORA;
	NODO^.FECHAHORA.RMIN := MIN;
	NODO^.FECHAHORA.RSEG := SEG;
	NODO^.ESCRITOR := POSICIONUSUARIO(USER,ARBOL);
	NODO^.LEIDO := FALSE;
	NODO^.SIG := NIL;
END	

PROCEDURE CONTESTARMENSAJE(ARBOL:PUNTARUS; USER:STRING; LISTMSN:PUNTMENSAJE);
{AGREGA EL MENSAJE NUEVO A LA LISTA DE MENSAJES}{24}
VAR
	NODITO: PUNTMENSAJE;
BEGIN
	GENERARNODOMSNNUEVO(NODITO,USER,ARBOL);
	NODITO^.SIG := LISTAMSN;
	LISTAMSN : NODITO;
END;

PROCEDURE VERMENSAJES(LISTACONVERS:PUNTCONVERS; USER:STRING; CANT:INTEGER; ARBOL:PUNTARUS);
{AGRUPA DIFERENTES TAREAS NECESARIASNPARA MOSTRAR MENSAJES}{25}
VAR
	POSCONV: PUNTCONVERS;
	HABLA: BOOLEAN;
	COD: INTEGER;
BEGIN
	WRITE('Ingrese codigo de conversacion: ');
	READ(COD);
	POSCONV := POSICIONCONVERSACION(LISTACONVER,COD);
	IF POSCONV := NIL THEN
		WRITELN('La conversacion buscada no existe, regresara al menu anterior')
	ELSE BEGIN
		HABLA := PERTENECEALACONVERSACION(POSCONV,USER);
		IF NOT HABLA THEN
			WRITELN('Usted no participo en esta conversacion, es un espia, error, error, error, volvera al menu anterior')
		ELSE BEGIN
			MOSTRARMENSAJES(CANT,POSCONV^.MENSAJE,USER);
			IF CANT = ULTIMOSCINCO THEN
				CONTESTARMENSAJE(ARBOL,USER,POSCONV^MENSAJE);
		END;
	END;
END;

FUNCTION YAEXISTE(LISTACONVERS:PUNTCONVERS; USER1:STRING; USER2:STRING):BOOLEAN;
{VERIFICA SI YA EXISTE UNA CONVERSACION ENTRE DOS USUARIOS}{26}
BEGIN
	IF LISTACONVERS = NIL THEN
		YAEXISTE := FALSE
	ELSE
		IF (LISTACONVERS^.USUARIO1^.USUARIO = USER1) OR (LISTACONVERS^.USUARIO2^.USUARIO = USER1) THEN
			IF LISTACONVERS^.USUARIO1^.USUARIO = USER1 THEN
				IF LISTACONVERS^.USUARIO2^.USUARIO = USER2
					YAEXISTE := TRUE
				ELSE
					YAEXISTE := YAEXISTE(LISTACONVERS^.SIG,USER1,USER2)
			ELSE
				IF LISTACONVERS^.USUARIO1^.USUARIO = USER2 THEN
					YAEXISTE := TRUE
				ELSE
					YAEXISTE := YAEXISTE(LISTACONVERS^.SIG,USER1,USER2)
		ELSE
			YAEXISTE := YAEXISTE(LISTACONVERS^.SIG,USER1,USER2);
END;

FUNCTION CODIGONUEVO(LISTACONVERS:PUNTCONVERS):INTEGER;
{GENERA EL CODIGO DE UNA CONVERSACION NUEVA}{27}
BEGIN
	IF LISTACONVERS = NIL THEN
		CODIGONUEVO := 1
	ELSE
		IF LISTACONVERS^.SIG = NIL THEN
			CODIGONUEVO := LISTACONVERS^.CODIGO + 1
		ELSE
			CODIGONUEVO := CODIGONUEVO(LISTACONVERS^.SIG);
END;

PROCEDURE INSERTARALFINAL(VAR LISTACONVERS:PUNTCONVERS; NEWCOD:INTEGER; USER1,USER2:PUNTARUS;);
{INSERTA EL NODO AL FINAL DE LA LISTA}{28}
BEGIN
	IF LISTACONVERS = NIL THEN
		GENERARNODOCONVERSACION(NEWCOD, USER1, USER2, LISTACONVERS)
	ELSE
		INSERTARALFINAL(LISTACONVERS^.SIG, NEWCOD, USER1, USER2);	
END;

PROCEDURE NUEVACONVERSACION(USER1:STRING; VAR LISTACONVERS:PUNTCONVERS; ARBOL:PUNTARUS;);
{GENERA UNA NUEVA CONVERSACION SOLO SI ES POSIBLE}{29}
VAR 
	USER2:STRING;
	YAFIGURA:BOOLEAN;
	NEWCOD:INTEGER;
	POSUS,POSUS2:PUNTARUS;
BEGIN
	WRITE('Ingrese el usuario con el que quiere hablar: ');
	READLN(USER2);
	POSUS2:=POSICIONUSUARIO(ARBOL, USER2);
	IF POSUS2 = NILL THEN
		BEGIN
			WRITELN('El usuario con el que quiere hablar no existe');
			WRITELN('volvera el menu anterior');
		END;
	ELSE 
		BEGIN
			YAFIGURA:=YAEXISTE(LISTACONVERS, USER1, USER2);
			IF YAFIGURA THEN
				WREITELN('La conversacion ya existe volvera al menu anterior')
			ELSE
				BEGIN
					NEWCOD:= CODIGONUEVO(LISTACONVERS);
					POSUS:=POSICIONUSUARIO(ARBOL, USER1);
					INSERTARALFINAL(LISTACONVERS, NEWCOD, POSUS,POSUS2);
				END;
		END;
END;

PROCEDURE BORRARMENSAJE(VAR LISTAMSN;PUNTMENSAJE);
{BORRA TODOS LOS MENSAJES DE UNA LISTA DESDE EL ULTIMO AL PRIMERO}{30}
BEGIN
	IF LISTAMSN <> NILL THEN 
		BEGIN
			BOORARMENSAJE(LISTAMSN^.SIG);
			LISTAMSN^.ESCRITOR:=NILL;
			//LISTAMSN:=NILL; {REVISAR}
			DISPOSE(LISTAMSN);
		END
END;

PROCEDURE BORRARCONVERSACION(VAR LISTACONVERS:PUNTCONVERS, USER:STRING);
{BORRAR TODAS LAS CONVERSACIONES EN LAS QUE PARTICIPO EL USER}{31}
BEGIN 
	IF LISTACONVERS <> NILL THEN 
		BEGIN
			BORRARCONVERSACIONES(LISTACONVERS^.SIG, USER);
			IF (LISTACONVERS^.USUARIO1^.USUARIO) OR (LISTACONVERS^.USUARIO2^.USUARIO) THEN
				BEGIN
					LISTACONVERS^.USUARIO1:=NILL;
					LISTACONVERS^.USUARIO2:=NILL;
					BORRARMENSAJE(LISTACONVERS^.MENSAJE);
					LISTACONVERS^.MENSAJE := NILL;
					DISPOSE(LISTACONVERS);
				END;
		END;
END;

PROCEDURE BUSCARREEEMPLAZO(ARBOL:PUNTARUS, VAR NODES:PUNTARUS);
{BUSCA UN REEMPLAZO PARA REUBICAR DESPUES DE ELIMINAR UN USUARIO DEL ARBOL, BUSCA EL MAYOR DE LOS MENORES}{32}
BEGIN
	IF ARBOL^.MAYOR = NILL THEN 
		BEGIN
			NODES := ARBOL^.MAYOR;
			ARBOL := ARBOL^.MENOR;
			NODES^.MENOR := NILL;
		END
	ELSE
		BUSCARREEMPLAZO(ARBOL^.MAYOR, NODES);
END;

PROCEDURE ELIMINARUSUARIO(VAR ARBOL:PUNTARUS; USER:STRING);
{ELIMINA UN USUARIO DEL ARBOL}{33}
VAR REEMPLAZO:PUNTARUS;
BEGIN
	IF USER < ARBOL^.USUARIO THEN
		ELIMINARUSUARIO(ARBOL^.MENOR, USER)
	ELSE
		IF USER > ARBOL^.USUARIO THEN
			ELIMINARUSUARIO(ARBOL^.MAYOR, USER)
		ELSE
			BEGIN
				IF (ARBOL^.MENOR = NILL) AND (ARBOL^.MAYOR = NILL) THEN
					ARBOL:=NILL
				ELSE
					IF ARBOL^.MENOR = NILL THEN 
						ARBOL:=ARBOL^.MAYOR
					ELSE
						IF ARBOL^.MAYOR = NILL THEN
							ARBOL:= ARBOL^.MENOR
						ELSE 
							BEGIN
								BUSCARREEMPLAZO(ARBOL^.MENOR);
								REEMPLAZO^.MENOR:= ARBOL^.MENOR;
								REEMPLAZO^.MAYOR:= ARBOL^.MAYOR;
								ARBOL:=REEMPLAZO;
							END;
				DISPOSE(ARBOL);
			END;
END;

PROCEDURE BORRARUSUARIO(VAR LISTACONVERS:PUNTCONVERS; VAR ARBOL:PUNTARUS; USER:STRING);
{SE ENCARGA DE BORRAR LOS MENSAJES Y CONVERSACIONES DEL USER Y POR ULTIMO BORRAR EL USUARIO DEL ARBOL}{34}
BEGIN
	BORRARCONVERSACION(LISTACONVERS, USER);
	ELIMINARUSUARIO(ARBOL, USER);
END;

PROCEDURE MENU2 (VAR LISTACONVERS:PUNTCONVERS; VAR ARBOL:PUNTARUS; USER:STRING);
{MUESTRA Y REALIZA LAS TAREAS DEL MENU2}{35}
VAR
	COD,OP:INTEGER;
BEGIN
	CLRSCR;
	WRITELN('1. Listar conversaciones activas');
	WRITELN('2. LISTAR TODAS LAS CONVERSACIONES');
	WRITELN('3. VER ULTIMOS MENSAJES DE CONVERSACION');
	WRITELN('4. VER CONVERSACION');
	WRITELN('5. CONTESTAR MENSAJES');
	WRITELN('6. NUEVA CONVERSACION');
	WRITELN('7. BORRAR USUARIO');
	WRITELN('8. LogOut');
	WRITELN('INGRESE LA OPCION Y PRECIONE ENTER: ');
	READLN(OP);
	WHILE (OP <> 8) OR (OP <> 7) DO 
		BEGIN
			CASE OP OF DO 
				1: LISTARCONVERSACIONESACTIVAS(LISTACONVERS, ARBOL, USER);
				2: LISTARTODASLASCONVERSACIONES(LISTACONVERS, ARBOL, USER);
				3: VERMENSAJES(LISTACONVERS, USER, ULTIMOSDIEZ);
				4: VERMENSAJES(LISTACONVERS, USER, TODOSMSN);
				5: VERMENSAJES(LISTACONVERS, USER, ULTIMOSCINCO);
				6: NUEVACONVERSACION(USER, LISTACONVERS, ARBOL);
			END;
			WRITELN('1. LISTAR CONVERSACIONES ACTIVAS');
			WRITELN('2. LISTAR TODAS LAS CONVERWSACIONES');
			WRITELN('3. VER ULTIMOS MENSAJES DE CONVERSACION');
			WRITELN('4. VER CONVERSACION');
			WRITELN('5. CONTESTAR MENSAJES');
			WRITELN('6. NUEVA CONVERSACION');
			WRITELN('7. BORRAR USUARIO');
			WRITELN('8. LogOut');
			WRITELN('INGRESE LA OPCION Y PRECIONE ENTER: ');
			READLN(OP);
		END;
	IF OP = 7 THEN 
		BORRARUSUARIO(LISTACONVERS, ARBOL, USER); 
END;

PROCEDURE LOGIN(POS:PUNTARUS; ARBOL:PUNTARUS; LISTACONVERS:PUNTCONVERS);
{VALIDA LOS DATOS E INGRESA AL MENU 2}{36}
VAR
	PAZ: STRING[8];
BEGIN
	WRITE('Ingrese contraseÃ±a o ingrese 0 para volver:' );
	READLN(PAZ);
	WHILE PAZ <> POS^.PASSWORD AND PAZ <> '0' DO BEGIN
		WRITE('Ingrese contraseÃ±a o ingrese 0 para volver:' );
		READLN(PAZ);
	END;
	IF PAZ = POS^.PASSWORD THEN
		MENU2(LISTACONVERS,ARBOL,USER);
END;
		
PROCEDURE MOSTRARUSUARIOS(ARBOL:PUNTARUS);
{MUESTRA LOS USUARIOS EN ORDEN DESCENDENTE - MAYOR A MENOR}{37}
BEGIN
	IF ARBOL <> NIL THEN BEGIN
		MOSTRARUSUARIOS(ARBOL^.MAYOR);
		WRITELN(ARBOL^.USUARIO);
		MOSTRARUSUARIOS(ARBOL^.MENOR);
	END;
END;

PROCEDURE PASAJEARBOL(ARBOL:PUNTARUS; VAR ARCHUS:TARCHUSUARIO);
{DE MANERA RECURSIVA VA TRASLADANDO DEL ARBOL AL ARCHIVO}{38}
VAR 
	REG:REGUSUARIO;
BEGIN
	IF ARBOL <> NILL THEN 
		BEGIN
			REG.RUSUARIO:= ARBOL^.USUARIO;
			REG.RPASSWORD:=ARBOL^.PASSWORD;
			WRITE(ARCHUS,REG);
			PASAJEARBOL(ARBOL^.MENOR, ARCHUS);
			PASAJEARBOL(ARBOL^.MAYOR, ARCHUS);
		END;
END;


PROCEDURE PASAJELISTAMSN(VAR REG:REGMENSAJE; LISTAMSN:PUNTMENSAJE);
{COPIA LOS DATOS DE LA LISTA DE MENSAJES A UN REGISTRO AUXILIAR}{39}
BEGIN
	REG.RFECHAHORA.RDIA:=LISTAMSN^.FECHAHORA.RDIA;
	REG.RFECHAHORA.RMES:=LISTAMSN^.FECHAHORA.RMES;
	REG.RFECHAHORA.RANIO:=LISTAMSN^.FECHAHORA.RANIO;
	REG.RFECHAHORA.RHORA:=LISTAMSN^.FECHAHORA.RHORA;
	REG.RFECHAHORA.RMIN:=LISTAMSN^.FECHAHORA.RMIN;
	REG.RFECHAHORA.RSEG:=LISTAMSN^.FECHAHORA.RSEG;
	REG.RCODIGO:=LISTACONVERS^.CODIGO;
	REG.RUSUARIO:=LISTAMENSAJE^.ESCRITOR^.USUARIO;
	REG.RTEXTO:=LISTAMENSAJE^.TEXTO;
	REG.RLEIDO:=LISTAMENSAJE^.LEIDO;
END;

PROCEDURE TRANSFERIRMENSAJES(VAR ARCHMSN:TARCHMENSAJES; LISTAMSN:PUNTMENSAJE;);
{EN BASE A LA LISTA DE MENSAJES ACTUALIZA EL ARCHIVO DE MENSAJES}{40}
VAR 
	REG:REGMENSAJE;
BEGIN
	IF LISTAMSN <> NIL THEN
		BEGIN
			TRANSFERIRMENSAJES(ARCHMSN, LISTAMSN^.SIG);
			PASAJELISTAMSN(REG,LISTAMSN);
			WRITE(ARCHMSN,REG);
		END;
END;

PROCEDURE PASAJELISTACONVERS(VAR REG:REGCONVERS; LISTACONVERS:PUNTCONVERS;);
{CON LAS CONVERSACIONES VA GUARDANDO TODOS LOS DATOS A UN REGISTRO AUXILIAR}{41}
BEGIN
	REG.RCODIGO:=LISTACONVERS^.CODIGO;
	REG.RUSUARIO1:=LISTACONVERS^.USUARIO1^.USUARIO;
	REG.RUSUARIO2:=LISTACONVERS^.USUARIO2^.USUARIO;
END;

PROCEDURE ACTUALIZARARCHCONVERSYMSN(VAR ARCHCONVERS:TARCHCONVERS; VAR ARCHMSN:TARCHMENSAJES; LISTACONVERS:PUNTCONVERS;);
{CON LAS CONVERSACIONES VA GUARDANDO TODOS LOS DATOS EN LOS ARCHIVOS}{42}
VAR 
	REG:REGCONVERS;
BEGIN
	IF LISTACONVERS <> NIL THEN 
		BEGIN
			TRANSFERIRMENSAJES(ARCHMSN,LISTACONVERS^.MENSAJE);
			PASAJELISTACONVERS(REG,LISTACONVERS);
			WRITE(ARCHCONVERS, REG);
			ACTUALIZARARCHCONVERSYMSN(ARCHCONVERS,ARCHMSN,LISTACONVERS^.SIG);
		END;
END;

PROCEDURE BORRARTODASLASCONVERSACIONES(VAR LISTACONVERS:PUNTCONVERS);
{BORRA DE MANERA RECURSIVA TODAS LAS CONVERSACIONES DE LA LISTA CON SUS MENSAJES}{43}
BEGIN
	IF LISTACONVERS <> NIL THEN
		BEGIN
			BORRARTODASLASCONVERSACIONES(LISTACONVERS^.SIG);
			BORRARMENSAJE(LISTACONVERS^.MENSAJE);
			LISTACONVERS^.USUARIO1:=NILL;
			LISTACONVERS^.USUARIO2:=NILL;
			LISTACONVERS:=NILL;
			DISPOSE(LISTACONVERS);
		END;
END;

PROCEDURE BORRARTODOELARBOL(VAR ARBOL:PUNTARUS);
{BORRA TODO EL ARBOL PARA NO OCUPAR MEMORIA}{44}
BEGIN
	IF ARBOL <> NILL THEN
		BEGIN
			BORRARTODOELARBOL(ARBOL^.MENOR);
			BORRARTODOELARBOL(ARBOL^.MAYOR);
			ARBOL:=NIL;
			DISPOSE(ARBOL);
		END;
END;

PROCEDURE SALIR(VAR LISTACONVERS:PUNTCONVERS; VAR ARBOL:PUNTARUS);
{ABRE LOS ARCHIVOS Y DISTRIBUYE LAS TAREAS A REALIZAR PREVIAS A CERRAR EL PROGRAMA}{45}
VAR
	ARCHUS: TARCHUSUARIO;
	ARCHONVERS: TACHCONVERS;
	ARCHMSN: TARCHMENSAJE;
BEGIN
	ASSIGN(ARCHUS,'ARCHIVOUSUARIOS.DAT');
	ASSIGN(ARCHMSN,'ARCHIVOMENSAJES.DAT');
	ASSIGN(ARCHCONVERS,'ARCHIVOCONVERSACIONES.DAT');
	REWRITE(ARCHUS);
	REWRITE(ARCHCONVERS);
	REWRITE(ARHMSN);
	PASAJEARBOL(ARCHUS,ARBOL);
	ACTUALIZARARCHCONVERSYMSN(ARCHCONVERS,ARCHMSN,LISTACONVERS);
	CLOSE(ARCHUS);
	CLOSE(ARCHCONVERS);
	CLOSE(ARCHMSN);
	BORRARTODASLASCONVERSACIONES(LISTACONVERS);
	BORRARTODOELARBOL(ARBOL);
END;

PROCEDURE MENU1(VAR ARBOL:PUNTARUS; VAR LISTACONVERS:PUNTCONVERS);
{MUESTRA EL MENU1 HASTA QUE SE ELIJA LA OPCION SALIR}{46}
VAR
	OPCION : INTEGER;
	USER,PAZ : STRING[8];
	POS : PUNTARUS;
	NODO : PUNTARUS;
BEGIN
	WRITELN('Bienvenido est maravilla es Guatsapâ¢Â®');
	WRITELN;
	WRITELN('1. Login');
	WRITELN('2. Nuevo Usuario');
	WRITELN('3. Ver Usuarios');
	WRITELN('4. Salir');
	READLN(OPCION);
	WHILE OPCION <> 4 DO BEGIN
		CASE OPCION OF DO
			1 : BEGIN
					WRITE('Ingrese usuario a loguear: ');
					READLN(USER);
					POS := POSICION(USER,ARBOL);
					IF POS = NIL THEN BEGIN
						WRITELN('Usuario ya registrado, volverÃ¡ al menu anterior');
						DELAY(300);
						END;
					ELSE
						LOGIN(POS,ARBOL,LISTACONVERS);
				END;
			2 : BEGIN
					WRITE('Ingrese usuario a registrar: ');
					READLN(USER);
					POS := POSICION(USER,ARBOL);
					IF POS = NIL THEN BEGIN
						WRITELN('Usuario ya registrado, volverÃ¡ al menu anterior');
						DELAY(300);
					END
					ELSE BEGIN
							WRITE('Ingrese contraseÃ±a: ');
							READLN(PAZ);
							NUEVOUSUARIO(ARBOL,USER,PAZ,NODO);
					END;
				END;
			3 : MOSTRARUSUARIOS(ARBOL);
		END;
		WRITELN('Bienvenido est maravilla es Guatsapâ¢Â®');
		WRITELN;
		WRITELN('1. Login');
		WRITELN('2. Nuevo Usuario');
		WRITELN('3. Ver Usuarios');
		WRITELN('4. Salir');
		READLN(OPCION);
	END;
	SALIR(LISTACONVERS,ARBOL);
	WRITE('Gracias por utilizar Guatsapâ¢Â® ');
END;

VAR {VARIABLES DEL PROGRAMA PRINCIPAL}

	ARCHIVOUSUARIOS : TARCHUSUARIOS;
	ARCHIVOCONVESACIONES : TARCHCONVERS;
	ARCHIVOMENSAJES : TARCHMENSAJES;
	ERRORARCHUSUARIOS,ERRORARCHCONVERSACIONES,ERRORARCHMENSAJES : BOOLEAN;
	LISTADECONVERSACIONES : PUNTCONVERS;
	ARBOLDEUSUARIOS : PUNTARUS; 
	
BEGIN {PROGRAMA PRINCIPAL}

	ERRORAPERTURAARCHIVOS(ARCHIVOUSUARIOS,ARCHIVOMENSAJES,ARCHIVOCONVESACIONES,ERRORARCHUSUARIOS,ERRORARCHMENSAJES,ERRORARCHCONVERSACIONES);
	CARGARESTRUCTURAS(ARBOLDEUSUARIOS,LISTADECONVERSACIONES,ARCHIVOMENSAJES,ARCHIVOUSUARIOS,ARCHIVOCONVESACIONES,ERRORARCHMENSAJES,ERRORARCHCONVERSACIONES,ERRORARCHUSUARIOS);
	MENU1(ARBOLDEUSUARIOS,LISTADECONVERSACIONES);
	
END.
